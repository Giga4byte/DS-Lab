#include <stdio.h>

void printMatrixC(int mat[][3]) {
    int rows = mat[0][0];
    int cols = mat[0][1];
    int nonZero = mat[0][2];

    printf("Matrix C:\n");
    printf("%d %d %d",rows, cols, nonZero);
    printf("\n");
    for (int i = 1; i <= nonZero; i++) {
        printf("%d %d %d\n", mat[i][0], mat[i][1], mat[i][2]);
    }
}

void printTransposeMatrix(int mat[][3]) {
    int rows = mat[0][0];
    int cols = mat[0][1];
    int nonZero = mat[0][2];

    printf("Transposed Sparse Matrix:\n");
    printf("%d %d %d",rows, cols, nonZero);
    printf("\n");
    for (int i = 1; i <= nonZero; i++) {
        printf("%d %d %d\n", mat[i][0], mat[i][1], mat[i][2]);
    }
}

void AddSparseMatrix(int A[][3], int B[][3], int C[][3]) {
    int p = 1, q = 1, r = 1;

    while (p <= A[0][2] && q <= B[0][2]) {
        if (A[p][0] < B[q][0]) {
            C[r][0] = A[p][0];
            C[r][1] = A[p][1];
            C[r][2] = A[p][2];
            p++;
            r++;
        } else if (A[p][0] > B[q][0]) {
            C[r][0] = B[q][0];
            C[r][1] = B[q][1];
            C[r][2] = B[q][2];
            q++;
            r++;
        } else {
            if (A[p][1] < B[q][1]) {
                C[r][0] = A[p][0];
                C[r][1] = A[p][1];
                C[r][2] = A[p][2];
                p++;
                r++;
            } else if (A[p][1] > B[q][1]) {
                C[r][0] = B[q][0];
                C[r][1] = B[q][1];
                C[r][2] = B[q][2];
                q++;
                r++;
            } else {
                C[r][0] = A[p][0];
                C[r][1] = A[p][1];
                C[r][2] = A[p][2] + B[q][2];
                p++;
                q++;
                r++;
            }
        }
    }
    
    // A[0][2] represents the number of non-zero elements in A
    while (p <= A[0][2]) {
        C[r][0] = A[p][0];
        C[r][1] = A[p][1];
        C[r][2] = A[p][2];
        p++;
        r++;
    }

    // B[0][2] represents the number of non-zero elements in B
    while (q <= B[0][2]) {
        C[r][0] = B[q][0];
        C[r][1] = B[q][1];
        C[r][2] = B[q][2];
        q++;
        r++;
    }

    C[0][0] = A[0][0];
    C[0][1] = A[0][1];
    C[0][2] = r - 1;
}

void TransposeSparseMatrix(int mat[][3], int transposed[][3]) {
    int rows = mat[0][0];
    int cols = mat[0][1];
    int nonZero = mat[0][2];
    int index[cols];

    // Initialize the index array to zero
    for (int i = 0; i < cols; i++) {
        index[i] = 0;
    }

    transposed[0][0] = cols;
    transposed[0][1] = rows;
    transposed[0][2] = nonZero;

    if (nonZero > 0) {
        for (int i = 1; i <= nonZero; i++) {
            index[mat[i][1]]++;
        }

        int startPosition[cols];
        startPosition[0] = 1;

        for (int i = 1; i < cols; i++) {
            startPosition[i] = startPosition[i - 1] + index[i - 1];
        }

        for (int i = 1; i <= nonZero; i++) {
            int col = mat[i][1];
            int pos = startPosition[col];
            transposed[pos][0] = col;
            transposed[pos][1] = mat[i][0];
            transposed[pos][2] = mat[i][2];
            startPosition[col]++;
        }
    }
}

int main() {
    int ch;
    int A[50][3], B[50][3], C[100][3], transposed[100][3];

    do {
        printf("\nMenu:\n");
        printf("1. Sparse Matrix Addition\n");
        printf("2. Sparse Matrix Transpose\n");
        printf("3. Quit\n");
        printf("Enter choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("Enter the number of non-zero elements in Matrix A: ");
                scanf("%d", &A[0][2]);

                printf("Enter the rows and columns of Matrix A: ");
                scanf("%d %d", &A[0][0], &A[0][1]);

                printf("Enter the non-zero elements of Matrix A (row, column, value):\n");
                for (int i = 1; i <= A[0][2]; i++) {
                    scanf("%d %d %d", &A[i][0], &A[i][1], &A[i][2]);
                }
                
                printf ("MATRIX A:\n");
                printf("%d %d %d", A[0][0], A[0][1], A[0][2]);
                printf ("\n");
                for (int i = 1; i <= A[0][2]; i++) {
                    printf("%d %d %d", A[i][0], A[i][1], A[i][2]);
                    printf("\n");
                }

                printf("Enter the number of non-zero elements in Matrix B: ");
                scanf("%d", &B[0][2]);

                printf("Enter the rows and columns of Matrix B: ");
                scanf("%d %d", &B[0][0], &B[0][1]);

                printf("Enter the non-zero elements of Matrix B (row, column, value):\n");
                for (int i = 1; i <= B[0][2]; i++) {
                    scanf("%d %d %d", &B[i][0], &B[i][1], &B[i][2]);
                }
                
                printf ("MATRIX B:\n");
                printf("%d %d %d", B[0][0], B[0][1], B[0][2]);
                printf ("\n");
                for (int i = 1; i <= B[0][2]; i++) {
                    printf("%d %d %d", B[i][0], B[i][1], B[i][2]);
                    printf("\n");
                }

                AddSparseMatrix(A, B, C);
                printf("Resultant Sparse Matrix C:\n");
                printMatrixC(C);
                break;

            case 2:
                printf("Enter the number of non-zero elements in the matrix: ");
                scanf("%d", &A[0][2]);

                printf("Enter the rows and columns of the matrix: ");
                scanf("%d %d", &A[0][0], &A[0][1]);

                printf("Enter the non-zero elements of the matrix (row, column, value):\n");
                for (int i = 1; i <= A[0][2]; i++) {
                    scanf("%d %d %d", &A[i][0], &A[i][1], &A[i][2]);
                }

                TransposeSparseMatrix(A, transposed);
                printf("Transposed Sparse Matrix:\n");
                printTransposeMatrix(transposed);
                break;

            case 3:
                printf("Quitting the program.\n");
                break;

            default:
                printf("Invalid choice, please try again.\n");
        }
    } while (ch != 3);

    return 0;
}
